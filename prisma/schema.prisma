// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                   String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  GuildMember          GuildMember[]
  GuildSettings        GuildSettings?
  GuildCreditsSettings GuildCreditsSettings?
  ApiCredentials       ApiCredentials[]
}

model User {
  id             String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  GuildMember    GuildMember[]
  ApiCredentials ApiCredentials[]
  UserReputation UserReputation[]
}

model GuildMember {
  guildId           String
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  Guild             Guild              @relation(fields: [guildId], references: [id])
  User              User               @relation(fields: [userId], references: [id])
  GuildMemberCredit GuildMemberCredit?
  ApiCredentials    ApiCredentials[]

  @@unique([guildId, userId])
}

model GuildMemberCredit {
  guildId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  GuildMember GuildMember @relation(fields: [guildId, userId], references: [guildId, userId])
  balance     Int         @default(0)

  @@unique([guildId, userId])
}

model UserReputation {
  id        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  User User @relation(fields: [id], references: [id])

  negative Int @default(0)
  positive Int @default(0)
}

model GuildSettings {
  id        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [id], references: [id])

  creditsSettings        GuildCreditsSettings? @relation(fields: [guildCreditsSettingsId], references: [id])
  guildCreditsSettingsId String?
}

model GuildCreditsSettings {
  id        String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild Guild @relation(fields: [id], references: [id])

  workBonusChance   Int             @default(30)
  workPenaltyChance Int             @default(10)
  status            Boolean         @default(false)
  rate              Int             @default(1)
  timeout           Int             @default(5)
  workRate          Int             @default(25)
  workTimeout       Int             @default(86400)
  minimumLength     Int             @default(5)
  GuildSettings     GuildSettings[]
}

model ApiCredentials {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  guildMember GuildMember? @relation(fields: [guildId, userId], references: [guildId, userId])

  apiName     String
  credentials Json

  @@unique([guildId, apiName])
  @@unique([userId, apiName])
}

// model GuildConfigEmbeds {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   successColor String @default("#22bb33")
//   waitColor    String @default("#f0ad4e")
//   errorColor   String @default("#bb2124")
//   footerText   String @default("https://github.com/ZynerOrg/xyter")
//   footerIcon   String @default("https://github.com/ZynerOrg.png")
// }

// model GuildConfigCredits {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status        Boolean @default(false)
//   rate          Int     @default(1)
//   timeout       Int     @default(5)
//   workRate      Int     @default(25)
//   workTimeout   Int     @default(86400)
//   minimumLength Int     @default(5)
// }

// model GuildConfigPoints {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status        Boolean @default(false)
//   rate          Int     @default(1)
//   timeout       Int     @default(5)
//   minimumLength Int     @default(5)
// }

// model GuildConfigReputation {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status Boolean @default(false)
// }

// model GuildConfigCounters {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status Boolean @default(false)
// }

// model GuildConfigApisCpgg {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   urlIv        String?
//   urlContent   String?
//   tokenIv      String?
//   tokenContent String?
// }

// model GuildConfigAudits {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status    Boolean @default(false)
//   channelId String
// }

// model GuildConfigShop {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status Boolean @default(false)
// }

// model GuildConfigWelcome {
//   id        String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [id], references: [id])

//   status              Boolean @default(false)
//   joinChannelId       String?
//   joinChannelMessage  String?
//   leaveChannelId      String?
//   leaveChannelMessage String?
// }

// model GuildCounters {
//   guildId   String
//   channelId String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [guildId], references: [id])

//   triggerWord String
//   count       Int    @default(0)

//   @@unique([guildId, channelId])
// }

// model GuildMemberCredit {
//   userId  String
//   guildId String

//   guildMember GuildMember @relation(fields: [userId, guildId], references: [userId, guildId])

//   balance Int @default(0)

//   @@unique([userId, guildId])
// }

// model Cooldown {
//   guildId   String
//   userId    String
//   timeoutId String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   guild Guild @relation(fields: [guildId], references: [id])
//   user  User  @relation(fields: [userId], references: [id])

//   cooldown Int

//   @@unique([guildId, userId, timeoutId])
// }
