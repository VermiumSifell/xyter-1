import axios, { AxiosInstance } from "axios";
import { Guild } from "discord.js";
import prisma from "../handlers/prisma";
import encryption from "../helpers/encryption";
import { IEncryptionData } from "../interfaces/EncryptionData";

interface ApiCredentials {
  url: IEncryptionData;
  token: IEncryptionData;
  [key: string]: IEncryptionData | unknown;
}

class CtrlPanelAPI {
  private guild: Guild;
  private apiCredentials: ApiCredentials | null;
  private api: AxiosInstance;

  constructor(guild: Guild) {
    this.guild = guild;
    this.apiCredentials = null;
    this.api = axios.create();
  }

  private async fetchApiCredentials() {
    const apiCredentials = await prisma.apiCredentials.findUnique({
      where: {
        guildId_apiName: {
          guildId: this.guild.id,
          apiName: "Ctrlpanel.gg",
        },
      },
    });

    if (!apiCredentials || !apiCredentials.credentials) {
      throw new Error(
        "Please ask the server administrator to configure the CtrlPanel.gg API credentials for this guild to enable this functionality."
      );
    }

    this.apiCredentials = apiCredentials.credentials as ApiCredentials;
  }

  private getPlainUrl() {
    if (!this.apiCredentials) {
      throw new Error("API credentials not fetched");
    }

    const { url } = this.apiCredentials;
    return encryption.decrypt(url);
  }

  private getPlainToken() {
    if (!this.apiCredentials) {
      throw new Error("API credentials not fetched");
    }

    const { token } = this.apiCredentials;
    return encryption.decrypt(token);
  }

  public async generateVoucher(code: string, amount: number, uses: number) {
    await this.fetchApiCredentials();

    const plainUrl = this.getPlainUrl();
    const plainToken = this.getPlainToken();

    this.api.defaults.baseURL = plainUrl;
    this.api.defaults.headers.common["Authorization"] = plainToken
      ? `Bearer ${plainToken}`
      : undefined;

    const shopUrl = `${plainUrl}/store`;

    await this.api.post("vouchers", {
      uses,
      code,
      credits: amount,
      memo: `Generated by Discord Bot: ${this.guild.client.user.tag}`,
    });

    return { redeemUrl: `${shopUrl}?voucher=${code}` };
  }
}

export default CtrlPanelAPI;
